{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useEffect, useState } from 'react';\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport Constants from 'expo-constants';\nimport Loading from \"../components/Loading\";\nimport ProgressBar from \"../components/ProgressBar\";\nimport ProfileThumb from \"../components/ProfileThumb\";\nimport BackButton from \"../components/BackButton\";\nimport InfoCard from \"../components/InfoCard\";\nvar screen = Dimensions.get('window');\nimport { fetchCredits } from \"../services/services\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nexport default function MovieScreen(_ref) {\n  var navigation = _ref.navigation,\n      route = _ref.route;\n\n  var _useState = useState(null),\n      _useState2 = _slicedToArray(_useState, 2),\n      credits = _useState2[0],\n      setCredits = _useState2[1];\n\n  var _useState3 = useState(true),\n      _useState4 = _slicedToArray(_useState3, 2),\n      loading = _useState4[0],\n      setLoading = _useState4[1];\n\n  var _useState5 = useState(''),\n      _useState6 = _slicedToArray(_useState5, 2),\n      director = _useState6[0],\n      setDirector = _useState6[1];\n\n  var movie = route.params.movie;\n  useEffect(function () {\n    setLoading(true);\n    fetchCredits(movie.id).then(function (data) {\n      setCredits(data.credits);\n      setDirector(data.director);\n      setLoading(false);\n    });\n  }, []);\n  return loading ? _jsx(Loading, {}) : _jsxs(View, {\n    style: styles.container,\n    children: [_jsxs(View, {\n      children: [_jsx(BackButton, {\n        navigation: navigation\n      }), _jsx(Image, {\n        source: {\n          uri: \"http://image.tmdb.org/t/p/w780\" + (movie == null ? void 0 : movie.poster_path)\n        },\n        style: styles.banner\n      }), _jsx(InfoCard, {\n        movie: movie,\n        director: director\n      })]\n    }), _jsx(View, {\n      style: styles.credit,\n      children: _jsxs(_Fragment, {\n        children: [_jsx(Text, {\n          style: styles.title,\n          children: \"CAST\"\n        }), credits && _jsx(FlatList, {\n          data: credits.cast,\n          renderItem: function renderItem(_ref2) {\n            var item = _ref2.item;\n            return _jsx(ProfileThumb, {\n              item: item\n            });\n          },\n          horizontal: true\n        })]\n      })\n    })]\n  });\n}\nvar styles = StyleSheet.create({\n  banner: {\n    width: window.width,\n    height: 400\n  },\n  container: {\n    flex: 1,\n    paddingTop: Constants.statusBarHeight,\n    backgroundColor: '#212121'\n  },\n  title: {\n    color: 'white',\n    fontSize: 16,\n    fontWeight: 'bold'\n  }\n});","map":{"version":3,"sources":["C:/Users/moham/OneDrive/Bureau/Expo/MovieApp/screens/MovieScreen.js"],"names":["React","useEffect","useState","Constants","Loading","ProgressBar","ProfileThumb","BackButton","InfoCard","screen","Dimensions","get","fetchCredits","MovieScreen","navigation","route","credits","setCredits","loading","setLoading","director","setDirector","movie","params","id","then","data","styles","container","uri","poster_path","banner","credit","title","cast","item","StyleSheet","create","width","window","height","flex","paddingTop","statusBarHeight","backgroundColor","color","fontSize","fontWeight"],"mappings":"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","sourcesContent":["/* screen/MovieScreen.js */\r\nimport React, { useEffect, useState } from 'react';\r\nimport {\r\n  Text,\r\n  View,\r\n  StyleSheet,\r\n  Image,\r\n  TextInput,\r\n  Dimensions,\r\n  FlatList,\r\n  TouchableOpacity,\r\n} from 'react-native';\r\nimport Constants from 'expo-constants';\r\nimport Loading from '../components/Loading';\r\nimport ProgressBar from '../components/ProgressBar';\r\nimport ProfileThumb from '../components/ProfileThumb';\r\nimport BackButton from '../components/BackButton';\r\nimport InfoCard from '../components/InfoCard';\r\nconst screen = Dimensions.get('window');\r\n/**\r\n * importing fetchCredits function from servises.js\r\n * we will use this function to fetch the list of crew and casts\r\n * and render them\r\n */\r\nimport { fetchCredits } from '../services/services';\r\n\r\nexport default function MovieScreen({ navigation, route }) {\r\n  const [credits, setCredits] = useState(null);\r\n  const [loading, setLoading] = useState(true);\r\n  const [director, setDirector] = useState('');\r\n  /**\r\n   * below, we are getting the params that we passed\r\n   * while navigating from HomeScreen.\r\n   * we will use it to make an fetch request to\r\n   * get crew and cast list based on movie.id.\r\n   */\r\n  const { movie } = route.params;\r\n\r\n  useEffect(() => {\r\n    /**\r\n     * set the loading state to true as we start fetching\r\n     * credit details. while loading is true we will\r\n     * see the <Loading/> component, just like\r\n     * in HomeScreen\r\n     */\r\n    setLoading(true);\r\n    /**\r\n     * we will pass movie.id to fetchCredits()\r\n     * which will return us the list of cast, crew, and director\r\n     */\r\n    fetchCredits(movie.id).then((data) => {\r\n      setCredits(data.credits);\r\n      setDirector(data.director);\r\n      setLoading(false);\r\n    });\r\n  }, []);\r\n\r\n  return loading ? (\r\n    <Loading />\r\n  ) : (\r\n    <View style={styles.container}>\r\n      <View>\r\n        {/**\r\n      render <BackButton/>\r\n      we will pass navition prop too, so that we can \r\n      return back to HomeScreen\r\n       */}\r\n        <BackButton navigation={navigation} />\r\n        <Image\r\n          source={{\r\n            uri: `http://image.tmdb.org/t/p/w780${movie?.poster_path}`,\r\n          }}\r\n          style={styles.banner}\r\n        />\r\n        {/**\r\n        <InfoCard/> component takes movie and director\r\n        props, which we used in the previous section.\r\n         */}\r\n      <InfoCard movie={movie} director={director} />\r\n      </View> \r\n      <View style={styles.credit}>\r\n        <>\r\n          <Text style={styles.title}>CAST</Text>\r\n          {credits && (\r\n            <FlatList\r\n              data={credits.cast}\r\n              renderItem={({ item }) => <ProfileThumb item={item} />}\r\n              horizontal\r\n            />\r\n          )}\r\n        </>\r\n      </View>\r\n    </View>\r\n  );\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n  banner: { width: window.width, height: 400 },\r\n  container: {\r\n    flex: 1,\r\n    paddingTop: Constants.statusBarHeight,\r\n    backgroundColor: '#212121',\r\n  },\r\n  title: {\r\n    color: 'white',\r\n    fontSize: 16,\r\n    fontWeight: 'bold',\r\n  },\r\n});\r\n"]},"metadata":{},"sourceType":"module"}